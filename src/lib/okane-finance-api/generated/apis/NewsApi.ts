/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlphaVantageNewsResponseDTO,
  HTTPValidationError,
  Limit,
  Sort,
  Tickers,
} from '../models/index';
import {
    AlphaVantageNewsResponseDTOFromJSON,
    AlphaVantageNewsResponseDTOToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LimitFromJSON,
    LimitToJSON,
    SortFromJSON,
    SortToJSON,
    TickersFromJSON,
    TickersToJSON,
} from '../models/index';

export interface ArchiveTickerNewsNewsGetRequest {
    fromDate: string;
    toDate: string;
    tickers?: Tickers;
    limit?: Limit;
    sort?: Sort;
}

/**
 * 
 */
export class NewsApi extends runtime.BaseAPI {

    /**
     * Archive Ticker News
     */
    async archiveTickerNewsNews6hGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news/6h`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Archive Ticker News
     */
    async archiveTickerNewsNews6hGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.archiveTickerNewsNews6hGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Archive Ticker News
     */
    async archiveTickerNewsNewsGetRaw(requestParameters: ArchiveTickerNewsNewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlphaVantageNewsResponseDTO>> {
        if (requestParameters['fromDate'] == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling archiveTickerNewsNewsGet().'
            );
        }

        if (requestParameters['toDate'] == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling archiveTickerNewsNewsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromDate'] != null) {
            queryParameters['from_date'] = requestParameters['fromDate'];
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['to_date'] = requestParameters['toDate'];
        }

        if (requestParameters['tickers'] != null) {
            queryParameters['tickers'] = requestParameters['tickers'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlphaVantageNewsResponseDTOFromJSON(jsonValue));
    }

    /**
     * Archive Ticker News
     */
    async archiveTickerNewsNewsGet(requestParameters: ArchiveTickerNewsNewsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlphaVantageNewsResponseDTO> {
        const response = await this.archiveTickerNewsNewsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
